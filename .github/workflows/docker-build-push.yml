name: Docker Build and Push

on:
  push:
    branches: ['**']
    tags-ignore: ['release-*']
    # # Publish semver tags as releases.
    # tags: ['release-v*.*.*']
  pull_request:
    branches: ['**']

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  set-build-vars:
    name: Output build variables
    runs-on: ubuntu-latest
    outputs:
      result: ${{ fromJSON(steps.variables.outputs.result) }}
    steps:
      - id: variables
        name: Script CI variables
        uses: actions/github-script@v4
        with:
          script: |
            const branch = context.ref.split('/').pop();
            const { REGISTRY, IMAGE_NAME } = process.env;
            const imagePath = `${REGISTRY}/${IMAGE_NAME}/${branch}`;
            const appImage = `${imagePath}/app`;
            core.info(`Commit to branch '${branch}'`);
            core.info(`Building docker image for '${appImage}'`);
            core.exportVariable('GITHUB_BRANCH_SLUG', branch);
            core.exportVariable('APP_IMAGE', appImage);
            return { branch, appImage, imagePath };
      - name: Get result
        run: |
          echo "${{steps.variables.outputs.result}}"
          echo "${{toJSON(steps.variables.outputs.result)}}"
          echo ${{steps.variables.outputs.result}} | jq '.appImage'
          echo "${{toJSON(steps.variables.outputs.result).branch}}"

  build-and-push:
    name: Docker build and push
    runs-on: ubuntu-latest
    needs: set-build-vars
    permissions:
      contents: read
      packages: write

    steps:
      - name: Set values
        run: |
          echo "VARS=${{needs.set-build-vars.outputs.result}}" >> $GITHUB_ENV
          echo "APP_IMAGE=${{needs.set-build-vars.outputs.result.appImage}}" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the Docker image
        run: |
          docker pull ${{ env.APP_IMAGE }}:latest || true
          echo "{\"commitRef\":\"${{ github.sha }}\",\"pipelineIID\":\"null\",\"pipelineUrl\":\"${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}\",\"buildNo\":\"$CI_PIPELINE_ID\",\"branchName\":\"$CI_COMMIT_REF_NAME\",\"registryImage\":\"${{ env.APP_IMAGE }}\"}" > version.json
          docker build --force-rm --cache-from ${{ env.APP_IMAGE }}:latest -t ${{ env.APP_IMAGE }}:latest -f docker/build.DockerFile .
          docker push ${{ env.APP_IMAGE }}:latest

      # # Extract metadata (tags, labels) for Docker
      # # https://github.com/docker/metadata-action
      # - name: Extract Docker metadata
      #   id: meta
      #   uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${GITHUB_BRANCH_SLUG}/app:latest

      # # Build and push Docker image with Buildx (don't push on PR)
      # # https://github.com/docker/build-push-action
      # - name: Build and push Docker image
      #   uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      #   with:
      #     context: .
      #     push: ${{ github.event_name != 'pull_request' }}
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
